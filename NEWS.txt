v1.0.2 (2025-01-12)
 * Bugfix: CC 89 was displayed on the user interface as CC 90, this is now
   fixed.

v1.0.1 (2024-08-07)
 * Correct documentation about FL Studio usage and quirks.
 * Update documentation about REAPER quirks to reflect the fixes in 7.19.
 * Bugfix: MPE Emulator Lite will now use the correct reset value for rules
   with Global, All Below Anchor, or All Above Anchor target after plugin
   reinitialization.
 * FST (VST 2.4): Initialize the MIDI helper parameters for CC 74 and
   Pitch Bend to 50%.
 * VST 3: Initialize the MIDI helper parameters for CC 74 and
   Pitch Bend to 50%.
 * VST 3: turn off MPE to VST 3 Note Expression conversion in hosts which do it
   by default.
 * VST 3: update SDK to 3.7.12 build 20.

v1.0.0 (2024-07-17)
 * Transpose the two sides of the split point independently from each other.
   (E.g. extend the range of small keyboards, or play the same note with
   different expression settings.)
 * The user interface has been revised in order to make it easier to select
   controllers.
 * MPE Emulator Lite is a JS plugin for REAPER which implements most of
   MPE Emulator's features, and it runs on any platform where REAPER runs
   (including various Mac configurations).
 * Bugfix: the FST (VST 2) plugin will now export all its parameters.
 * Bugfix: the VST 3 plugin will now initialize and update its exported
   parameters correctly.

v0.0.2 (2024-07-08)
 * When notes are released and new notes are triggered, channel allocation will
   avoid reusing the released channels for as long as possible so that longer
   envelope releases have a chance to ring down.
 * Bugfix: when no notes were being played, and there were rules with Low,
   High, Old, or New target, and their matching control events were received,
   then MPE Emulator could emit MIDI System Reset (0xFF) messages followed by
   garbage data bytes. Now MPE Emulator will only emit MIDI messages that it is
   supposed to produce.

v0.0.1 (2024-07-01)
 * Retroactively add MPE functionality to non-MPE-capable MIDI input devices.
 * Remap controllers, e.g. turn modulation wheel data into MPE aftertouch and
   vice-versa.
 * Invert MIDI expression and controller data, and apply various other
   distortions.
 * Use the trigger velocity of notes as release velocity for synths that
   utilize it.
 * Split the keyboard and route polyphonic expressions to the two halves with
   different rules.
 * Route various expressions and controllers to the lowest, highest, oldest, or
   newest note globally, or across the split halves of the keyboard.
 * MIDI Learn.
